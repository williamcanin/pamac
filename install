#!/bin/bash
#
# Type: Script Shell Installer
# Description: Shell script for installing Pamac in Arch Linux.
#
# Supported Architecture: all
# Release State: 1.0.0
# Script Name: pamac
# Project: https://github.com/williamcanin/pamac.git
# Author: William C. Canin
#   E-Mail: william.costa.canin@gmail.com
#   Home page: williamcanin.me

# License:
# The MIT License (MIT) for Pamac

# Copyright (c) 2018 William C. Canin <william.costa.canin@gmail.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# ******************************************************************************
#
# Note: Use with root.
# Usage: bash pamac

# Begin ------------------------------------------------------------------------
#
# Variables
TEMP="$HOME/.pamac"

# Utils
function _msg_header_() {
  printf "\e[0;36m→ %s\e[0m$2" "$1"
}

function _msg_reply_() {
  printf "\e[0;36m→ %s\e[0m$2" "$1"
}

function _msg_finish_() {
  printf "\e[0;32m✔ %s\e[0m\n" "$@"
}

function _msg_warning_() {
  printf "\e[0;33m⚠ %s\e[0m\n" "$@"
}

function _msg_error_() {
  printf "\e[0;31m✖ %s\e[0m\n" "$@"
}


# Functions
#
# Welcome
function _welcome_(){
printf "\e[0;34m
----------------------------------------------------
WWelcome to the Pamac installer - © Copyright $(date +%Y)
----------------------------------------------------

Note: To install \"Pamac \" your user must have sudo permission.

Wait ...

\e[0m"
}

# Check if the script is running on a different distribution of Arch Linux
function _checked_distribuition_(){
  if ! egrep -q "^NAME=(\"?)(Arch Linux)\1[[:space:]]*$" /etc/*-release; then
    _msg_error_ "This installer script does not support this Linux distribution.
  The script is especially for Arch Linux."
    exit 1
  fi
}

# Capture version to be installed
function _capture_current_pamac(){
  pkgver="$(curl -sL https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=pamac-aur | grep ^_pkgver | cut -d'=' -f2)"
  pkgrel="$(curl -sL https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=pamac-aur | grep ^pkgrel | cut -d'=' -f2)"
}

# Checks whether the Pamac is already installed. If installed,
# a question if you want to reinstall to the same version or not, will appear.
function _check_pamac_installed_(){
  _capture_current_pamac
  checked_pamac="$(pacman -Qs pamac-aur | grep pamac-aur | cut -d'/' -f2 | awk '{print $1}')"
  checked_pamac_version="$(pacman -Qs pamac-aur | grep pamac-aur | cut -d'/' -f2 | awk '{print $2}')"
  if [[ "$checked_pamac" == "pamac-aur" ]]; then
    _msg_warning_ "The Pamac is already installed on your machine with the version $checked_pamac_version."
    if [[ "$checked_pamac_version" == "$pkgver-$pkgrel" ]]; then
      msg_same_version1="You want to remove the $checked_pamac_version version and reinstall the same version ($pkgver-$pkgrel)? (y/n)"
      msg_same_version2="Removing version $checked_pamac_version and reinstalling the same ..."
    else
      msg_same_version1="You want to remove the $checked_pamac_version version and install the version ${pkgver}-${pkgrel}? (y/n)"
      msg_same_version2="Removing version $checked_pamac_version and install the version ${pkgver}-${pkgrel} ..."
    fi
    _msg_header_ "$msg_same_version1" "\n"
    _msg_header_ "Reply:" ""
    read reply
    case "$reply" in
      y|Y )
        _msg_header_ "$msg_same_version2" "\n"
        sudo pacman -Rdd pamac
        _msg_finish_ "Pamac $checked_pamac_version removido com sucesso!"
        _msg_header_ "Reinstalling Pamac version ${pkgver}-${pkgrel} ..." "\n"
        sudo -k
        reinstall="true"
        ;;
       n|N)
        _msg_warning_ "Aborted by user. Bye."
        exit 0
       ;;
    esac
  fi
}

# Asks if you want to install/reinstall Pamac
function _installation_question_(){
  if [[ "$reinstall" != "true" ]]; then
   _msg_header_ "You want to continue installing Pamac? (y/n)" "\n"
  else
    _msg_header_ "You want to continue reinstalling Pamac? (y/n)" "\n"
  fi
  _msg_header_ "Reply:" ""
  read reply
  case "$reply" in
    n|N )
      _msg_warning_ "Aborted by user. Bye."
      exit 0
      ;;
    y|Y)
      _msg_header_ "Carrying on ..." "\n"
    ;;
  esac
}

# Verify dependencies basis for Pamac be installed
function _checked_dependencies_(){
  base_devel=$(pacman -Qs base-devel | awk '{print $1}' | cut -d'/' -f1 | sed "2,100d")
  if [[ -z "$base_devel" ]]; then
    _msg_header_ "The Pamac needs \"base-devel\". Installing ..." "\n"
    sleep 2
    sudo pacman -Sy && sudo pacman -S base-devel --noconfirm
    sudo -k
    _msg_finish_ "The packages \"base-devel\" installed successfully!"
  fi
}

# Creates Pamac cache base for download and installation
function _create_basic_instalation_(){
  if [[ ! -d "$TEMP" ]]; then
    _msg_header_ "Creating basic of facility ..." "\n"
    mkdir -p $TEMP
    _msg_finish_ "Installation base created!"
  fi
  cd $TEMP
}

# Download and install Pamac
function _download_install_packages_(){
  # Donwload pamac-aur
  _msg_header_ "Download Pamac ..." "\n"
  curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/pamac-aur.tar.gz
  _msg_finish_ "Download \"Pamac\" terminated!"

  # Install Pamac
  _msg_header_ "Decompressing \"Pamac ...\"" "\n"
  tar -xzf pamac-aur.tar.gz
  _msg_finish_ "Pamac uncompressed!"
  if [[ "$reinstall" != "true" ]]; then
   _msg_header_ "Install \"Pamac ...\"" "\n"
  fi
  cd pamac-aur
  makepkg -si --noconfirm
  _msg_finish_ "\"Pamac\" installed!"
  cd ~
}

# Clean the cache Pamac
function _clean_unnecessary_(){
  _msg_header_ "Cleaning unnecessary things ..." "\n"
  rm -rf $TEMP
  _msg_finish_ "Finished cleaning!"
}

# Main
_checked_distribuition_
_welcome_
_check_pamac_installed_
_installation_question_
_checked_dependencies_
_create_basic_instalation_
_download_install_packages_
_clean_unnecessary_
#
# End ------------------------------------------------------------------------
