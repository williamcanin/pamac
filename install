#!/bin/bash
#
# Type: Script Shell Installer
# Description: Shell script for installing Pamac in Arch Linux.
#
# Supported Architecture: all
# Release State: 1.0.0
# Script Name: pamac
# Project: https://github.com/williamcanin/pamac.git
# Author: William C. Canin
#   E-Mail: william.costa.canin@gmail.com
#   Home page: http://williamcanin.me

# Begin ------------------------------------------------------------------------
#
# Variables
TEMP="$HOME/.pamac"
APPNAME="Pamac"
PACKAGENAME="pamac-aur"

# Utils
function _msg_header_() {
  printf "\e[0;36m→ %s\e[0m$2" "$1"
}

function _msg_reply_() {
  printf "\e[0;36m→ %s\e[0m$2" "$1"
}

function _msg_finish_() {
  printf "\e[0;32m✔ %s\e[0m\n" "$@"
}

function _msg_warning_() {
  printf "\e[0;33m⚠ %s\e[0m\n" "$@"
}

function _msg_error_() {
  printf "\e[0;31m✖ %s\e[0m\n" "$@"
}


# Functions
#
# Welcome
function _welcome_(){
printf "\e[0;34m
 ---------------------------------------------------
| Welcome to the ${APPNAME} installer - © Copyright $(date +%Y) |
 ---------------------------------------------------
|                                                   |
| Note: To install \"${APPNAME}\" your user must have sudo | 
| permission.                                       |
|                                                   |
 ----------------------------------------------------

\e[0m"
printf "Wait" 
_wait_spinner "5"
}

# Spin function for messages in wait
function _wait_spinner(){
    sleep $1 &
    PID=$!
    i=1
    sp="●◐◒◔◑◓●"
    echo -n ' '
    setterm -cursor off
    printf ' '
    while [ -d /proc/$PID ]
    do
        printf "\b${sp:i++%${#sp}:1}"
    done
    printf "\n"
    setterm -cursor on
}

# Check user root
function _verify_user(){
  if [ "$(id -u)" == "0" ]; then
    _msg_error_ "You can not run this script with root user."
    exit 1
  fi  
}

# Check if the script is running on a different distribution of Arch Linux
function _checked_distribuition_(){
  if ! egrep -q "^NAME=(\"?)(Arch Linux)\1[[:space:]]*$" /etc/*-release; then
    _msg_error_ "This installer script does not support this Linux distribution.
  The script is especially for Arch Linux."
    exit 1
  fi
}

# Capture version to be installed
function _capture_current_version_(){
  pkgver="$(curl -sL https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=${PACKAGENAME} | grep ^_pkgver | cut -d'=' -f2)"
  pkgrel="$(curl -sL https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=${PACKAGENAME} | grep ^pkgrel | cut -d'=' -f2)"
}

# Checks whether the package is already installed. If installed,
# a question if you want to reinstall to the same version or not, will appear.
function _check_installed_(){
  _capture_current_version_
  checked_package="$(pacman -Qs ${PACKAGENAME} | grep ${PACKAGENAME} | cut -d'/' -f2 | awk '{print $1}')"
  checked_package_version="$(pacman -Qs ${PACKAGENAME} | grep ${PACKAGENAME} | cut -d'/' -f2 | awk '{print $2}')"
  if [[ "$checked_package" == "${PACKAGENAME}" ]]; then
    _msg_warning_ "The ${APPNAME} is already installed on your machine with the version $checked_package_version."
    if [[ "$checked_package_version" == "${pkgver}-${pkgrel}" ]]; then
      msg_same_version1="You want to remove the $checked_package_version version and reinstall the same version (${pkgver}-${pkgrel})? (y/n)"
      msg_same_version2="Removing version $checked_package_version and reinstalling the same ..."
    else
      msg_same_version1="You want to remove the $checked_package_version version and install the version ${pkgver}-${pkgrel}? (y/n)"
      msg_same_version2="Removing version $checked_package_version and install the version ${pkgver}-${pkgrel} ..."
    fi
    _msg_header_ "$msg_same_version1" "\n"
    _msg_header_ "Reply:" ""
    read reply
    case "$reply" in
      y|Y )
        _msg_header_ "$msg_same_version2" "\n"
        _msg_warning_ "[ Enter the password for sudo ]"
        sudo pacman -Rdd ${PACKAGENAME}
        _msg_finish_ "${APPNAME} $checked_package_version removido com sucesso!"
        _msg_header_ "Reinstalling ${APPNAME} version ${pkgver}-${pkgrel} ..." "\n"
        sudo -k
        reinstall="true"
        ;;
       n|N)
        _msg_warning_ "Aborted by user. Bye."
        exit 0
       ;;
    esac
  fi
}

# Asks if you want to install/reinstall.
function _installation_question_(){
  if [[ "$reinstall" != "true" ]]; then
   _msg_header_ "You want to continue installing ${APPNAME}? (y/n)" "\n"
  else
    _msg_header_ "You want to continue reinstalling ${APPNAME}? (y/n)" "\n"
  fi
  _msg_header_ "Reply:" ""
  read reply
  case "$reply" in
    n|N )
      _msg_warning_ "Aborted by user. Bye."
      exit 0
      ;;
    y|Y)
      _msg_header_ "Carrying on ..." "\n"
    ;;
  esac
}

# Verify dependencies basis for be installed.
function _checked_dependencies_(){
  base_devel=$(pacman -Qs base-devel | awk '{print $1}' | cut -d'/' -f1 | sed "2,100d")
  if [[ -z "$base_devel" ]]; then
    _msg_header_ "The ${APPNAME} needs \"base-devel\". Installing ..." "\n"
    sleep 2
    _msg_warning_ "[ Enter the password for sudo ]"
    sudo pacman -Sy && sudo pacman -S base-devel --noconfirm
    sudo -k
    _msg_finish_ "The packages \"base-devel\" installed successfully!"
  fi
}

# Creates cache base for download and installation.
function _create_basic_instalation_(){
  if [[ ! -d "$TEMP" ]]; then
    _msg_header_ "Creating basic of facility ..." "\n"
    mkdir -p $TEMP
    _msg_finish_ "Installation base created!"
  fi
  cd $TEMP
}

# Download and install package.
function _download_install_packages_(){
  # Donwload
  _msg_header_ "Download ${APPNAME} ..." "\n"
  curl -O https://aur.archlinux.org/cgit/aur.git/snapshot/${PACKAGENAME}.tar.gz
  _msg_finish_ "Download \"${APPNAME}\" terminated!"

  # Install
  _msg_header_ "Decompressing \"${APPNAME} ...\"" "\n"
  tar -xzf ${PACKAGENAME}.tar.gz
  _msg_finish_ "${APPNAME} uncompressed!"
  if [[ "$reinstall" != "true" ]]; then
   _msg_header_ "Install \"${APPNAME} ...\"" "\n"
  fi
  cd ${PACKAGENAME}
  makepkg -si --noconfirm
  _msg_finish_ "\"${APPNAME}\" installed!"
  cd ~
}

# Clean the cache installer.
function _clean_unnecessary_(){
  _msg_header_ "Cleaning unnecessary things ..." "\n"
  rm -rf $TEMP
  _msg_finish_ "Finished cleaning!"
}

# Main
_verify_user
_checked_distribuition_
_welcome_
_check_installed_
_installation_question_
_checked_dependencies_
_create_basic_instalation_
_download_install_packages_
_clean_unnecessary_
#
# End ------------------------------------------------------------------------
